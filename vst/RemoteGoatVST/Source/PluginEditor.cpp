/*
  ==============================================================================

  This file was auto-generated by the Introjucer!

  It contains the basic startup code for a Juce application.

  ==============================================================================
  */

#include "PluginProcessor.h"
#include "PluginEditor.h"

#define WIDTH 500
#define HEIGHT 500

//==============================================================================
RemoteGoatVstAudioProcessorEditor::RemoteGoatVstAudioProcessorEditor(RemoteGoatVstAudioProcessor* ownerFilter)
: AudioProcessorEditor(ownerFilter)
{
	// This is where our plugin's editor size is set.
	setSize(WIDTH, HEIGHT);

	_goat = ImageFileFormat::loadFrom(BinaryData::goat_png, BinaryData::goat_pngSize);
}

RemoteGoatVstAudioProcessorEditor::~RemoteGoatVstAudioProcessorEditor()
{
}

//==============================================================================
void RemoteGoatVstAudioProcessorEditor::paint(Graphics& g)
{
	g.fillAll(Colour(0x20, 0x20, 0x20));
	g.setColour(Colours::white);
	g.setFont(15.0f);

	// Get audio processor.
	auto* pu = getAudioProcessorTyped();

	// Write logo.
	g.drawImage(_goat, WIDTH / 2 - 110, HEIGHT / 2 - 110, 220, 220, 0, 0, 220, 220);

	// Write trace lines.
	if (0)
	{
		const auto& trace = pu->getTrace();
		int i = 0;
		for (const String& line : trace)
		{
			g.drawText(line, 0, i * 15, getWidth(), 15, Justification::left, true);
			++i;
		}
	}

	// Write note markers
	int noteCount = SAMPLE_NAMES_COUNT;
	const float twoPi = 2 * float_Pi;
	const float thetaStart = 3 * float_Pi / 2;
	float theta = thetaStart;
	float dtheta = twoPi / noteCount;
	const float radius = 200;
	const float innerRadius = 75;
	const float borderThickness = 3;
	g.setFont(innerRadius / 2);
	for (int i = 0; i < noteCount; ++i)
	{
		float cx = WIDTH / 2 + radius * cos(theta),
			cy = HEIGHT / 2 + radius * sin(theta);
		pu->writeTrace(String() << "Ellipse at " << cx << "," << cy);
		Rectangle<float> rect(cx - innerRadius / 2, cy - innerRadius / 2,
			innerRadius, innerRadius);
		Colour colour((float)((theta - thetaStart) / twoPi), 1.0f, 1.0f, (uint8)0xFF);
		g.setColour(colour);
		g.drawEllipse(rect, borderThickness);
		g.setColour(Colours::white);

		const Sample& sample = pu->getSample(SAMPLE_NAMES[i]);
		if (sample.isAlive())
		{
			g.setColour(colour);
			g.fillEllipse(rect);
			g.setColour(Colours::black);
		}

		Rectangle<int> recti(rect.getX(), rect.getY(), rect.getWidth(), rect.getHeight());
		g.drawFittedText(sample.getName(), recti, Justification::centred, 1);

		theta += dtheta;
	}

}

//==============================================================================
RemoteGoatVstAudioProcessor* RemoteGoatVstAudioProcessorEditor::getAudioProcessorTyped() const
{
	return (RemoteGoatVstAudioProcessor*)getAudioProcessor();
}
